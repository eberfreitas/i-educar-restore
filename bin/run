#!/usr/bin/env php
<?php

define('DS', DIRECTORY_SEPARATOR);
define('HOME', getenv('HOME'));

require_once __DIR__ . '/../vendor/autoload.php';

use Aws\S3\S3Client;
use Garden\Cli\Cli;
use function Aws\parse_ini_file;

$cli = new Cli();

$cli->description('Database restore tool for i-Educar.')
    ->opt('base:b', 'Database name to be restored. Ex.: saopaulo.', true, 'string')
    ->opt('newbase:B', 'New database to be created. Defaults to --base.', false, 'string')
    ->opt('date:d', 'Backup date. Defaults to current date.')
    ->opt('include-audit:i', 'Restore with audit tables. They are not restored by default.', false, 'boolean')
    ->opt('host:h', 'DB host (can be informed in the config file).', false, 'string')
    ->opt('port:p', 'DB port (can be informed in the config file).', false, 'int')
    ->opt('user:u', 'DB user (can be informed in the config file).', false, 'string')
    ->opt('password:P', 'DB password (can be informed in the config file).', false, 'string')
    ->opt('config-file:c', 'Config file path. Defaults to "config.ini" in the current directory.', false, 'string')
    ->opt('aws-bucket', 'AWS bucket (can be informed in the config file).', false, 'string')
    ->opt('aws-region', 'AWS prefered region (can be informed in the config file).', false, 'string')
    ->opt('aws-key', 'AWS key (can be informed in the config file).', false, 'string')
    ->opt('aws-secret', 'AWS secret (can be informed in the config file).', false, 'string')
    ->opt('aws-prefix', 'AWS search prefix (can be informed in the config file).', false, 'string');

$args = $cli->parse($argv, true);
$currDir = getcwd();

chdir($currDir);

echo "\n";

$globalConfigFile = HOME . DS . '.config' . DS . 'i-educar-restore' . DS . 'config.ini';
$configFile = $args->getOpt('config-file', $currDir . DS . 'config.ini');
$configFile = realpath($configFile);
$realConfigFile = null;
$userConfig = [];

if (file_exists($configFile)) {
    $realConfigFile = $configFile;
} elseif (file_exists($globalConfigFile)) {
    $realConfigFile = $globalConfigFile;
}

if ($realConfigFile) {
    $userConfig = parse_ini_file($realConfigFile);

    echo $cli->blue('Using config file at "' . $realConfigFile . '"') . "\n\n";
}

$requiredConfigs = [
    'host',
    'port',
    'user',
    'aws-bucket',
    'aws-key',
    'aws-secret',
    'aws-prefix'
];

$config = [];

foreach ($requiredConfigs as $conf) {
    $config[$conf] = $args->getOpt($conf, $userConfig[$conf] ?? null);
}

foreach ($config as $k => $c) {
    if (is_null($c)) {
        echo $cli->red(sprintf('Configuration key "%s" must be informed as an option or via config file.', $k));

        exit(1);
    }
}

try {
    $date = new DateTime($args->getOpt('date', null) ?? date('Y-m-d'));
} catch (Exception $e) {
    echo $cli->red($e->getMessage());

    exit(1);
}

$config['base'] = $args->getOpt('base');
$config['date'] = $date->format('Y-m-d');
$config['year'] = $date->format('Y');
$config['month'] = $date->format('m');
$config['day'] = $date->format('d');
$config['include-audit'] = (bool) $args->getOpt('include-audit', false);
$config['aws-region'] = $args->getOpt('aws-region', 'sa-east-1');
$config['newbase'] = format($args->getOpt('newbase', $config['base']), $config);

//---

function format(string $template, array $data): string
{
    $replacePairs = [];

    foreach ($data as $k => $v) {
        $replacePairs['{' . $k . '}'] = $v;
    }

    return strtr($template, $replacePairs);
}

//---

function pgCmd(string $command, array $data = []): string
{
    global $config;

    $data = array_merge($config, $data);

    if (!empty($config['password'])) {
        $command = 'PGPASSWORD="{password}" ' . $command;
    }

    return format($command, $data);
}

//---

exec(pgCmd('pg_isready --host {host} --port {port} --user {user}'), $output);

if (strpos($output[0], 'accepting connections') === false) {
    echo $cli->red('Couldn\'t connect to the database. Check your credentials.');

    exit(1);
}

//---

echo $cli->blue(format('Searching backups for "{base}" / {date}', $config)) . "\n\n";

$s3 = new S3Client([
    'version' => 'latest',
    'region' => $config['aws-region'],
    'credentials' => [
        'key' => $config['aws-key'],
        'secret' => $config['aws-secret'],
    ],
]);

$prefix = format($config['aws-prefix'], $config);

$backups = $s3->listObjects([
    'Bucket' => $config['aws-bucket'],
    'Delimiter' => '/',
    'Prefix' => $prefix,
    'MaxKeys' => 1,
]);

if (!isset($backups['Contents'])) {
    echo $cli->red('Couldn\'t find a backup file. Try a different base or date.');

    exit(1);
}

$backupKey = $backups['Contents'][0]['Key'];
$backupParts = explode('/', $backupKey);
$backupFilename = array_pop($backupParts);

echo $cli->green('Backup file found "' . $backupFilename) . "\"\n\n";
echo $cli->blue('Preparing download...') . "\n\n";

if (file_exists($backupFilename)) {
    @unlink($backupFilename);
}

$cmd = $s3->getCommand('GetObject', [
    'Bucket' => $config['aws-bucket'],
    'Key' => $backupKey
]);

$request = $s3->createPresignedRequest($cmd, '+1 minute');
$url = (string) $request->getUri();

$downloadCommand = getDownloadCommand($url, $backupFilename);

if ($userConfig['tempserver']) {
    passthru(
        getCommandIntoSsh(
            $downloadCommand,
            $userConfig
        )
    );      
} else {
    passthru($downloadCommand);
}

//---

$databaseListFile = '__db_list.tmp';

$restoreCommand = getRestoreCommand($backupFilename, $databaseListFile);

if ($userConfig['tempserver']) {
    exec(
        getCommandIntoSsh(
            'rm ' . $databaseListFile,
            $userConfig
        )
    );
    exec(
        getCommandIntoSsh(
            $restoreCommand,
            $userConfig
        )
    );
} else {
    @unlink($databaseListFile);
    exec($restoreCommand);
}

if ($config['include-audit'] === false) {
    $auditTables = [
        'modules.auditoria',
        'modules.auditoria_geral',
        'pmieducar.auditoria_falta_componente_dispensa',
        'pmieducar.auditoria_nota_dispensa',
    ];

    foreach ($auditTables as $table) {
        $table = str_replace('.', ' ', $table);

        $removeTableCommand = getRemoveTableCommand($table, $databaseListFile);

        if ($userConfig['tempserver']) {
            exec(
                getCommandIntoSsh(
                    $removeTableCommand,
                    $userConfig
                )
            );
        } else {
            exec($removeTableCommand);
        }
    }
}
die;
//---

echo $cli->blue('Dropping and creating database...') . "\n\n";

exec(pgCmd('psql -h {host} -p {port} -U {user} -c "{command}"', [
    'command' => format('SELECT pg_terminate_backend (pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = \'{newbase}\';', $config)
]));

passthru(pgCmd('dropdb -h {host} -p {port} -U {user} {newbase}'));

passthru(pgCmd('psql -h {host} -p {port} -U {user} -c "CREATE DATABASE {newbase};"'));

echo "\n";

//---

echo $cli->blue('Restoring database...') . "\n\n";

passthru(pgCmd('pg_restore -L {databaseListFile} --host={host} --port={port} --username={user} --dbname={newbase} {backupFilename}',
    compact('databaseListFile', 'backupFilename')
));

passthru(pgCmd('psql -h {host} -p {port} -U {user} -c "{command}"', [
    'command' => format('ALTER DATABASE {newbase} SET search_path = \"\{user}\", public, portal, cadastro, acesso, alimentos, consistenciacao, historico, pmiacoes, pmicontrolesis, pmidrh, pmieducar, pmiotopic, urbano, modules;', $config)
]));

echo "\n";

//---

echo $cli->blue('Cleaning up...');

@unlink($databaseListFile);
@unlink($backupFilename);

exit(0);

function getDownloadCommand($url, $backupFilename) {
    return format('wget -O {backupFilename} "{url}"', compact('backupFilename', 'url'));
}

function getRestoreCommand($backupFilename, $databaseListFile){
    return pgCmd('pg_restore -l {backupFilename} > {databaseListFile}', compact('backupFilename', 'databaseListFile'));
}

function getCommandIntoSsh($command, $config) {
    $host = $config['tempserver-host'];
    $user = $config['tempserver-user'];
    $key = $config['tempserver-sshkey'];
    $downloadfolder = $config['tempserver-downloadfolder'];

    return format('ssh -o "StrictHostKeyChecking no" {user}@{host} -i {key} -t "cd {downloadfolder} && ' . $command . '"', 
        compact('user','host','key','downloadfolder'));
}

function getRemoveTableCommand($table, $databaseListFile) {
    return exec(format('sed -i \'/TABLE DATA {table}/d\' {databaseListFile}', compact('table', 'databaseListFile')));
}